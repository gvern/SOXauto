# test_evidence_system.py
"""
Script de test et d√©monstration du syst√®me d'√©vidence digitale SOX.
Ce script montre comment le syst√®me g√©n√®re des preuves inalt√©rables.
"""

import pandas as pd
import tempfile
import json
from datetime import datetime
from evidence_manager import DigitalEvidenceManager, IPEEvidenceGenerator, EvidenceValidator


def create_sample_data() -> pd.DataFrame:
    """Cr√©e un √©chantillon de donn√©es pour d√©monstration."""
    sample_data = {
        'id_company': ['BF', 'CI', 'KE', 'UG', 'NG'] * 100,
        'Entry_No': range(1, 501),
        'Document_No': [f'DOC{i:06d}' for i in range(1, 501)],
        'Document_Type': ['13010', '13009', '13006'] * 167,  # Distribution r√©aliste
        'Posting_Date': ['2024-04-30'] * 500,
        'Amount': [round(i * 1.5 + 100, 2) for i in range(1, 501)],
        'Customer_No': [f'CUST{i:05d}' for i in range(1, 501)],
        'Description': [f'Transaction {i}' for i in range(1, 501)]
    }
    return pd.DataFrame(sample_data)


def demo_evidence_generation():
    """D√©monstration compl√®te du syst√®me d'√©vidence."""
    print("üß™ D√âMONSTRATION - Syst√®me d'√âvidence Digitale SOX")
    print("=" * 60)
    
    # 1. Cr√©er un gestionnaire d'√©vidence temporaire
    print("\n1Ô∏è‚É£ Initialisation du gestionnaire d'√©vidence...")
    with tempfile.TemporaryDirectory() as temp_dir:
        evidence_manager = DigitalEvidenceManager(temp_dir)
        
        # 2. Cr√©er un package d'√©vidence
        print("\n2Ô∏è‚É£ Cr√©ation du package d'√©vidence...")
        execution_metadata = {
            'ipe_id': 'DEMO_IPE',
            'description': 'D√©monstration du syst√®me d\'√©vidence',
            'cutoff_date': '2024-05-01',
            'execution_start': datetime.now().isoformat(),
            'sox_compliance_required': True
        }
        
        evidence_dir = evidence_manager.create_evidence_package(
            'DEMO_IPE', execution_metadata
        )
        print(f"   üìÅ Package cr√©√©: {evidence_dir}")
        
        # 3. G√©n√©rer les donn√©es de test
        print("\n3Ô∏è‚É£ G√©n√©ration des donn√©es de test...")
        sample_df = create_sample_data()
        print(f"   üìä Donn√©es cr√©√©es: {len(sample_df)} lignes, {len(sample_df.columns)} colonnes")
        
        # 4. Cr√©er le g√©n√©rateur d'√©vidence
        print("\n4Ô∏è‚É£ G√©n√©ration des preuves d'√©vidence...")
        evidence_generator = IPEEvidenceGenerator(evidence_dir, 'DEMO_IPE')
        
        # Simuler une requ√™te SQL
        demo_query = """
        SELECT id_company, Entry_No, Document_No, Document_Type, 
               Posting_Date, Amount, Customer_No, Description
        FROM [dbo].[Customer Ledger Entries] 
        WHERE Posting_Date < ?
          AND Document_Type IN ('13010', '13009', '13006')
        ORDER BY id_company, Entry_No
        """
        
        # Sauvegarder la requ√™te
        evidence_generator.save_executed_query(
            demo_query, 
            {'cutoff_date': '2024-05-01', 'parameters': ['2024-05-01']}
        )
        print("   ‚úÖ Requ√™te SQL sauvegard√©e")
        
        # Sauvegarder l'√©chantillon de donn√©es
        evidence_generator.save_data_snapshot(sample_df, snapshot_rows=50)
        print("   ‚úÖ √âchantillon de donn√©es sauvegard√©")
        
        # G√©n√©rer le hash d'int√©grit√©
        integrity_hash = evidence_generator.generate_integrity_hash(sample_df)
        print(f"   ‚úÖ Hash d'int√©grit√© g√©n√©r√©: {integrity_hash[:16]}...")
        
        # Simuler des r√©sultats de validation
        validation_results = {
            'completeness': {'status': 'PASS', 'expected_count': 500, 'actual_count': 500},
            'accuracy_positive': {'status': 'PASS', 'witness_count': 1},
            'accuracy_negative': {'status': 'PASS', 'excluded_count': 0},
            'overall_status': 'SUCCESS'
        }
        
        evidence_generator.save_validation_results(validation_results)
        print("   ‚úÖ R√©sultats de validation sauvegard√©s")
        
        # 5. Finaliser le package
        print("\n5Ô∏è‚É£ Finalisation du package d'√©vidence...")
        evidence_zip = evidence_generator.finalize_evidence_package()
        print(f"   üì¶ Archive cr√©√©e: {evidence_zip}")
        
        # 6. D√©monstration de la v√©rification d'int√©grit√©
        print("\n6Ô∏è‚É£ V√©rification de l'int√©grit√©...")
        verification_results = EvidenceValidator.verify_package_integrity(evidence_dir)
        
        if verification_results['integrity_verified']:
            print("   ‚úÖ Package d'√©vidence V√âRIFI√â - Int√©grit√© confirm√©e")
        else:
            print("   ‚ùå Probl√®mes d√©tect√©s:")
            for issue in verification_results['issues_found']:
                print(f"      - {issue}")
        
        # 7. Afficher le contenu du package
        print("\n7Ô∏è‚É£ Contenu du package d'√©vidence:")
        from pathlib import Path
        evidence_path = Path(evidence_dir)
        for file_path in sorted(evidence_path.glob('*')):
            if file_path.is_file():
                size_kb = file_path.stat().st_size / 1024
                print(f"   üìÑ {file_path.name} ({size_kb:.1f} KB)")
        
        # 8. D√©monstration de v√©rification du hash
        print("\n8Ô∏è‚É£ D√©monstration de v√©rification du hash...")
        demo_hash_verification(sample_df, integrity_hash)
        
        print(f"\nüéâ D√âMONSTRATION TERMIN√âE")
        print(f"üìÅ Fichiers g√©n√©r√©s dans: {evidence_dir}")
        print(f"üì¶ Archive finale: {evidence_zip}")


def demo_hash_verification(original_df: pd.DataFrame, expected_hash: str):
    """D√©montre comment v√©rifier l'int√©grit√© d'un dataset avec le hash."""
    import hashlib
    
    print("   üîç V√©rification du hash d'int√©grit√©...")
    
    # Recalculer le hash selon la m√©thode standard
    df_sorted = original_df.sort_values(by=list(original_df.columns)).reset_index(drop=True)
    data_string = df_sorted.to_csv(index=False, encoding='utf-8')
    calculated_hash = hashlib.sha256(data_string.encode('utf-8')).hexdigest()
    
    if calculated_hash == expected_hash:
        print("   ‚úÖ HASH V√âRIFI√â - Les donn√©es sont int√®gres")
        print(f"      Original:  {expected_hash[:32]}...")
        print(f"      Calcul√©:   {calculated_hash[:32]}...")
    else:
        print("   ‚ùå HASH DIFF√âRENT - Les donn√©es ont √©t√© alt√©r√©es")
        print(f"      Original:  {expected_hash[:32]}...")
        print(f"      Calcul√©:   {calculated_hash[:32]}...")
    
    # D√©monstration d'alt√©ration
    print("\n   üß™ Test d'alt√©ration des donn√©es...")
    corrupted_df = original_df.copy()
    corrupted_df.iloc[0, 0] = "ALTERED"  # Alt√©rer une seule cellule
    
    df_sorted_corrupted = corrupted_df.sort_values(by=list(corrupted_df.columns)).reset_index(drop=True)
    data_string_corrupted = df_sorted_corrupted.to_csv(index=False, encoding='utf-8')
    corrupted_hash = hashlib.sha256(data_string_corrupted.encode('utf-8')).hexdigest()
    
    print("   üìä R√©sultat avec donn√©es alt√©r√©es:")
    if corrupted_hash != expected_hash:
        print("   ‚úÖ ALT√âRATION D√âTECT√âE - Le syst√®me fonctionne correctement")
        print(f"      Original:  {expected_hash[:32]}...")
        print(f"      Alt√©r√©:    {corrupted_hash[:32]}...")
    else:
        print("   ‚ùå ERREUR - L'alt√©ration n'a pas √©t√© d√©tect√©e")


def demo_comparison_with_manual():
    """Comparaison avec le processus manuel traditionnel."""
    print("\n" + "=" * 60)
    print("üìä COMPARAISON: Manuel vs Automatis√©")
    print("=" * 60)
    
    comparison_data = [
        ["Aspect", "Processus Manuel", "SOXauto Digital Evidence", "Am√©lioration"],
        ["Temps requis", "15-30 min par IPE", "2-3 min par IPE", "üöÄ 90% plus rapide"],
        ["Preuve d'int√©grit√©", "Capture d'√©cran", "Hash cryptographique", "üîê Inalt√©rable"],
        ["Couverture donn√©es", "20 premi√®res lignes", "Dataset complet + √©chantillon", "üìä 100% couvert"],
        ["V√©rifiabilit√©", "Impossible", "Re-v√©rification possible", "‚úÖ Totalement v√©rifiable"],
        ["Conformit√© audit", "Basique", "Enterprise-grade", "‚≠ê Sup√©rieur"],
        ["Risque d'erreur", "√âlev√© (humain)", "Minimal (automatis√©)", "üéØ Quasi-z√©ro"],
        ["Tra√ßabilit√©", "Limit√©e", "Compl√®te avec logs", "üìù Audit trail complet"],
        ["Stockage", "Fichiers dispers√©s", "Package structur√©", "üóÇÔ∏è Organis√©"],
    ]
    
    for row in comparison_data:
        print(f"{row[0]:<20} | {row[1]:<20} | {row[2]:<30} | {row[3]}")


if __name__ == "__main__":
    print("üîç TEST DU SYST√àME D'√âVIDENCE DIGITALE SOX")
    print("Cette d√©monstration montre comment SOXauto g√©n√®re des preuves inalt√©rables")
    print("=" * 80)
    
    try:
        demo_evidence_generation()
        demo_comparison_with_manual()
        
        print("\n" + "=" * 80)
        print("‚úÖ D√âMONSTRATION R√âUSSIE")
        print("Le syst√®me d'√©vidence digitale est op√©rationnel et sup√©rieur aux m√©thodes manuelles.")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA D√âMONSTRATION: {e}")
        import traceback
        traceback.print_exc()